package service

import (
	"encoding/json"
	"fmt"
	"net/http"
	"sort"
	"strings"
)

// UserState API helpers
func (s *Service) StatsGet(userID int) (string, error) {
	// –ü–æ–ª—É—á–∞–µ–º user-state (—Ç–µ–≥–∏ –∏ —Ä–µ—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏)
	state, err := s.UserStateGet(userID)
	if err != nil {
		return "‚ö†Ô∏è–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", err
	}
	if state == nil {
		return "‚ùå–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", nil
	}
	userTags := state.TheoryTags
	completedTasks := make(map[string]struct{}, len(state.CompletedTheoryTasks))
	for _, t := range state.CompletedTheoryTasks {
		completedTasks[t] = struct{}{}
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ id –∑–∞–¥–∞—á –ø–æ —Ç–µ–≥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (task_get_tags)
	tagTaskIDs := []int{}
	if len(userTags) > 0 {
		tagsParam := strings.Join(userTags, ",")
		urlTags := fmt.Sprintf("http://theory-service:8081/taskgettags?tags=%s", tagsParam)
		respTags, err := http.Get(urlTags)
		if err != nil {
			return "‚ö†Ô∏è–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Ç–µ–≥–∞–º", err
		}
		defer respTags.Body.Close()
		if respTags.StatusCode == http.StatusOK {
			var tagIDsResp struct {
				Ids []int `json:"ids"`
			}
			if err := json.NewDecoder(respTags.Body).Decode(&tagIDsResp); err == nil {
				tagTaskIDs = tagIDsResp.Ids
			}
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á (task_get_all)
	totalTasks := 0
	urlAll := "http://theory-service:8081/taskgetall" //
	respAll, err := http.Get(urlAll)
	if err != nil {
		return "‚ö†Ô∏è–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á", err
	}
	defer respAll.Body.Close()
	if respAll.StatusCode == http.StatusOK {
		var allCountResp struct {
			Count int `json:"count"`
		}
		if err := json.NewDecoder(respAll.Body).Decode(&allCountResp); err == nil {
			totalTasks = allCountResp.Count
		}
	}

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º
	completedTotal := 0
	completedByTag := 0
	completedSet := make(map[int]struct{})
	for _, id := range tagTaskIDs {
		if _, ok := completedTasks[fmt.Sprint(id)]; ok {
			completedByTag++
			completedSet[id] = struct{}{}
		}
	}
	// completedTotal - –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º (–µ—Å–ª–∏ completedTasks —Å–æ–¥–µ—Ä–∂–∏—Ç id, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ tagTaskIDs)
	completedTotal = len(completedTasks)

	percentTotal := 0
	if totalTasks > 0 {
		percentTotal = completedTotal * 100 / totalTasks
	}

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–≥–∞–º
	percentByTags := 0
	tagTasksCount := len(tagTaskIDs)
	if tagTasksCount > 0 {
		percentByTags = completedByTag * 100 / tagTasksCount
	}

	// –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–≥–∞–º (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, —Å—Ç—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
	left := make([]int, 0, tagTasksCount)
	for _, id := range tagTaskIDs {
		if _, ok := completedTasks[fmt.Sprint(id)]; !ok {
			left = append(left, id)
		}
	}
	leftStr := ""
	if len(left) > 0 {
		sort.Ints(left)
		leftStrs := make([]string, 0, len(left))
		for _, id := range left {
			leftStrs = append(leftStrs, fmt.Sprint(id))
		}
		leftStr = strings.Join(leftStrs, ",")
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
	completedIDs := make([]int, 0, len(completedSet))
	for id := range completedSet {
		completedIDs = append(completedIDs, id)
	}
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
	if len(completedIDs) > 0 {
		sort.Ints(completedIDs)
	}
	completedIDsStrs := make([]string, 0, len(completedIDs))
	for _, id := range completedIDs {
		completedIDsStrs = append(completedIDsStrs, fmt.Sprint(id))
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	stat := fmt.Sprintf(
		"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\\:\n\n–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ %d%% –∑–∞–¥–∞—á \\(%d –∏–∑ %d\\)\n–ü–æ —Ç—ç–≥–∞–º \\[%s \\] %d%% \\(%d –∏–∑ %d\\)\n–ù–æ–º–µ—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö\\: \\[%s \\]\n–ù–æ–º–µ—Ä–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è\\: \\[%s \\]",
		percentTotal, completedTotal, totalTasks,
		strings.Join(userTags, ","), percentByTags, completedByTag, tagTasksCount, strings.Join(completedIDsStrs, ","), leftStr,
	)
	return stat, nil
}
