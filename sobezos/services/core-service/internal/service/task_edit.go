package service

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strconv"

	"go.uber.org/zap"
)

// SendEditTask –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ theory-service –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
func (s *Service) TaskEdit(telegramID int, id string, question string, answer string, tags []string) (string, error) {
	url := "http://theory-service:8081/taskedit"

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ id
	if id == "" {
		s.logger.Error("–ù–µ —É–∫–∞–∑–∞–Ω id –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
		return "üìù–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å id", nil
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
	intid, err := strconv.Atoi(id)
	if err != nil {
		return "", fmt.Errorf("invalid id format: %v", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
	requestData := map[string]interface{}{
		"id": intid,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
	if question != "" {
		requestData["question"] = question
	}
	if answer != "" {
		requestData["answer"] = answer
	}
	if len(tags) > 0 {
		requestData["tags"] = tags
	}

	newJson, err := json.Marshal(requestData)
	if err != nil {
		s.logger.Error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏", zap.Error(err))
		return "‚ö†Ô∏è–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏", err
	}

	req, err := http.NewRequest("PUT", url, bytes.NewBuffer(newJson))
	if err != nil {
		s.logger.Error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ theory-service", zap.Error(err))
		return "‚ö†Ô∏è–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ theory\\-service", err
	}
	req.Header.Set("Content-Type", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		s.logger.Error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ theory-service", zap.Error(err))
		return "‚ö†Ô∏è–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ theory\\-service", err
	}
	defer resp.Body.Close()

	if resp.StatusCode == http.StatusOK {
		return "‚úÖ–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", nil
	}

	respMsg, _ := io.ReadAll(resp.Body)
	s.logger.Error("theory-service –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏", zap.Int("status", resp.StatusCode), zap.String("body", string(respMsg)))
	return "‚ö†Ô∏è–û—à–∏–±–∫–∞: " + string(respMsg), nil
}
