/taskadd
{
  "tags": [
    "мод_4_БД"
  ],
  "question": "1.1. Что такое БД?",
  "answer": "База данных (БД) — это совокупность данных, хранящихся в упорядоченном виде, и механизмы управления этими данными. БД представляет собой организованную по определенным правилам структуру, которая хранит в себе данные и обеспечивает их целостность и безопасность. БД предназначена для хранения больших объемов информации, которая может быть легко обработана, добавлена, удалена или изменена."
}
/taskadd
{
  "tags": [
    "мод_4_БД"
  ],
  "question": "1.2. Какие бывают БД?",
  "answer": "Базы данных бывают реляционными и нереляционными. Реляционные БД хранят данные в виде таблиц, а нереляционные — в виде документов, графов, ключей и значений. Пример реляционной БД: MySQL, PostgreSQL, Oracle, Microsoft SQL Server. Пример нереляционной БД: MongoDB, Redis, Neo4j, Cassandra."
}
/taskadd
{
  "tags": [
    "мод_4_БД"
  ],
  "question": "1.3. Зачем нужны БД? Почему бы не хранить все в обычных файлах?",
  "answer": "Хранить данные в обычных файлах **можно**, но БД нужны, чтобы решать ключевые проблемы:\n\n1. **Структура и поиск** — файлы требуют писать свой парсер, индексы, сортировки; БД делает это автоматически и быстро.\n\n2. **Целостность данных** — ограничения, связи между таблицами, транзакции; файлы этого не дают.\n\n3. **Многопользовательский доступ** — БД корректно управляет конкурентными изменениями, файлы легко ломаются при одновременном доступе.\n\n4. **Масштабируемость** — большие объёмы данных, индексы, кэширование; файлы становятся медленными и тяжёлыми.\n\n5. **Бэкапы и восстановление** — БД умеет делать точные снимки состояния и откаты, файлы приходится обрабатывать вручную.\n\nКороче говоря, **БД превращает “кучу файлов” в управляемый, быстрый и безопасный сервис хранения данных**."
}
/taskadd
{
  "tags": [
    "мод_4_БД"
  ],
  "question": "1.4. Что такое SQL?",
  "answer": "SQL (Structured Query Language) — декларативный язык структурированных запросов. Это язык программирования, который используется для создания, изменения и управления данными в реляционных базах данных."
}
/taskadd
{
  "tags": [
    "мод_4_БД"
  ],
  "question": "1.5. Что такое реляционная БД?",
  "answer": "Реляционная база данных — это база данных, основанная на реляционной модели данных.\n\nРеляционная модель данных — это модель данных, в которой данные представлены в виде таблиц, состоящих из строк и столбцов. В реляционной модели каждая строка таблицы представляет собой запись, а столбец — атрибут, то есть, таблицы могут иметь relation (отношение) друг с другом.\n\nЭто достигается посредством указания внешнего ключа в таблице постов, который ссылается на таблицу пользователей. Внешние ключи не всегда используются, в угоду производительности, но они могут быть полезны для поддержания целостности данных. Таблица может просто хранить в себе номер пользователя, который создал пост, но внешний ключ позволяет убедиться, что пользователь с таким номером существует."
}
/taskadd
{
  "tags": [
    "мод_4_БД"
  ],
  "question": "1.6. Что такое нереляционная БД?",
  "answer": "Нереляционная база данных — это база данных, основанная на нереляционной модели данных. Нереляционная модель данных — это модель данных, в которой данные представлены в виде документов, графов, ключей и значений. Нереляционные базы данных также называют NoSQL базами данных."
}
/taskadd
{
  "tags": [
    "мод_4_БД"
  ],
  "question": "1.7. Что такое NoSQL?",
  "answer": "NoSQL (Not Only SQL) — это подход к проектированию баз данных, в котором не используется реляционная модель данных. NoSQL базы данных используются для хранения и обработки больших объемов данных, которые не всегда имеют структурированный вид."
}
/taskadd
{
  "tags": [
    "мод_4_БД"
  ],
  "question": "1.8. Какие бывают NoSQL базы данных?",
  "answer": "NoSQL базы данных бывают четырех типов:\n\n- Ключ-значение (key-value) базы данных. Пример: Redis, Memcached.\n\n- Документоориентированные (document-oriented) базы данных. Пример: MongoDB, CouchDB.\n\n- Семейство столбцов (column family) базы данных. Пример: Cassandra, HBase.\n\n- Графовые (graph) базы данных. Пример: Neo4j, OrientDB."
}
/taskadd
{
  "tags": [
    "мод_4_БД"
  ],
  "question": "1.9. Как компьютер хранит информацию? Какая разница между ОЗУ и персистентным хранилищем?",
  "answer": "Память компьютера организована в несколько уровней:\n\n1. **Регистры CPU** — самый быстрый, но ограниченный по объему уровень (несколько десятков байт).\n\n2. **Кэш-память (Cache)** — промежуточное хранилище между процессором и оперативной памятью.\n\n3. **Оперативная память (RAM)** — медленнее кэша, но быстрее постоянного хранилища (SSD/HDD).\n\n4. **Постоянное хранилище (SSD/HDD)** — для долговременного хранения данных.\n\nПерсистентное хранилище (persistent storage) в контексте ПК — это тип памяти или устройства, в котором данные **сохраняются постоянно**, даже когда компьютер выключен.\n\nВ отличие от оперативной памяти (RAM), которая теряет данные после выключения питания, персистентное хранилище сохраняет информацию длительно.\n\nПримеры персистентного хранилища:\n\n- **Жесткий диск (HDD)**\n\n- **Твердотельный накопитель (SSD)**\n\n- **Флеш-накопители (USB, SD-карты)**\n\n- **Оптические диски (CD, DVD, Blu-ray)**\n\nОсновные характеристики:\n\n1. **Сохранение данных при выключении питания** — ключевое отличие от RAM.\n\n2. **Большая емкость** — обычно в сотнях гигабайт и терабайт.\n\n3. **Медленнее, чем RAM** — доступ к данным занимает больше времени."
}
/taskadd
{
  "tags": [
    "мод_4_БД"
  ],
  "question": "2.1. Что такое ACID?",
  "answer": "ACID — это аббревиатура, которая означает Atomicity, Consistency, Isolation, Durability (Атомарность, Согласованность, Изолированность, Долговечность). Это свойства транзакций в реляционных базах данных.\n\n- Атомарность (Atomicity) — это свойство транзакции, которое гарантирует, что либо все операции транзакции будут выполнены, либо ни одна.\n\n- Согласованность (Consistency) — это свойство транзакции, которое гарантирует, что транзакция не нарушает целостность данных.\n\n- Изолированность (Isolation) — это свойство транзакции, которое гарантирует, что транзакция не будет видна другим транзакциям, пока она не будет завершена.\n\n- Долговечность (Durability) — это свойство транзакции, которое гарантирует, что результаты транзакции будут сохранены после ее завершения"
}
